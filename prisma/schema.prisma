generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  role      UserRole @default(CANDIDATE)
  location  String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  skills      UserSkill[]
  applications Application[]
  jobPosts    JobPost[]
}

model JobPost {
  id           String     @id @default(uuid())
  title        String
  description  String
  location     String
  salaryMin    Int
  salaryMax    Int
  isArchived   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  employer     User       @relation(fields: [employerId], references: [id])
  employerId   String

  skills       JobSkill[]
  applications Application[]
}

model Application {
  id         String   @id @default(uuid())
  status     AppStatus @default(PENDING)
  createdAt  DateTime @default(now())

  jobPost    JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId  String

  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Skill {
  id        String     @id @default(uuid())
  name      String     @unique
  users     UserSkill[]
  jobPosts  JobSkill[]
}

model UserSkill {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  skill   Skill    @relation(fields: [skillId], references: [id])
  skillId String

  @@unique([userId, skillId])
}

model JobSkill {
  id       String   @id @default(uuid())
  jobPost  JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId String

  skill    Skill    @relation(fields: [skillId], references: [id])
  skillId  String

  @@unique([jobPostId, skillId])
}

enum UserRole {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum AppStatus {
  PENDING
  ACCEPTED
  REJECTED
}
